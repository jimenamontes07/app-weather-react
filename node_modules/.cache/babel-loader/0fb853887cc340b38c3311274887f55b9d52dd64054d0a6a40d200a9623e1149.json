{"ast":null,"code":"var _jsxFileName = \"/Users/jimen/Dropbox/Mac/Documents/react-weather/src/Weather.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport CurrentTemp from \"./CurrentTemp\";\nimport Forecast from \"./Forecast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Weather(props) {\n  _s2();\n  var _s = $RefreshSig$();\n  let [date, setDate] = useState(null);\n  let [day, setDay] = useState(null);\n  let [fullday, setFullday] = useState(null);\n  let days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  function loadDate() {\n    let now = new Date();\n    console.log(now);\n    let fullday = now.getDay();\n    let day = days[now.getDay()];\n    let hours = now.getHours();\n    let min = now.getMinutes();\n    if (min < 10) {\n      min = `0${min}`;\n    }\n    let time = `${hours}:${min}`;\n    setFullday(fullday);\n    setDate(time);\n    setDay(day);\n  }\n  MyComponent();\n  function MyComponent() {\n    _s();\n    useEffect(() => {\n      loadData();\n    }, []); // Pass an empty array to only call the function once on mount.\n\n    function loadData() {\n      loadDate();\n      console.log(date);\n      // Fetch data or perform other loading logic here\n    }\n\n    // ... component render logic\n  }\n  _s(MyComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  let EmojiSrc = `http://openweathermap.org/img/wn/${props.emoji}@2x.png`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Weather\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [day, \" \", fullday, \" ,\", date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: props.desc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CurrentTemp, {\n      submit: props.submit,\n      city: props.city,\n      desc: props.desc,\n      temp: props.temp,\n      emoji: EmojiSrc,\n      hum: props.hum,\n      wind: props.wind\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n      forecast: props.forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this);\n}\n_s2(Weather, \"axqgMHnzkrRfHRrid5OWDfXpbps=\");\n_c = Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","CurrentTemp","Forecast","jsxDEV","_jsxDEV","Weather","props","_s2","_s","$RefreshSig$","date","setDate","day","setDay","fullday","setFullday","days","loadDate","now","Date","console","log","getDay","hours","getHours","min","getMinutes","time","MyComponent","loadData","EmojiSrc","emoji","className","children","city","fileName","_jsxFileName","lineNumber","columnNumber","desc","submit","temp","hum","wind","forecast","_c","$RefreshReg$"],"sources":["/Users/jimen/Dropbox/Mac/Documents/react-weather/src/Weather.js"],"sourcesContent":["import React, {useState}  from \"react\";\nimport {useEffect} from \"react\";\n\n\nimport CurrentTemp from \"./CurrentTemp\";\nimport Forecast from \"./Forecast\";\n\nexport default function Weather(props) {\n\n\n    let [date , setDate] = useState(null);\n    let [day , setDay] = useState(null);\n    let [fullday , setFullday] = useState(null);\n\n\n   \n    \n\n    let days = [\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\",\n        \"Sunday\",\n      ];\n    \n\n    function loadDate() {\n        let now = new Date();\n        console.log(now);\n        let fullday = now.getDay();\n        let day = days[now.getDay()];\n        let hours = now.getHours();\n        let min = now.getMinutes();\n        if (min < 10) {\n          min = `0${min}`;\n        }\n        let time = `${hours}:${min}`;\n      \n        setFullday (fullday);\n        setDate  (time);\n        setDay(day);\n\n      }\n\n   \n\n      MyComponent();\n\n      function MyComponent() {\n         useEffect(() => {\n            loadData();\n         }, []); // Pass an empty array to only call the function once on mount.\n         \n         function loadData() {\n      \n          loadDate();\n          console.log(date);\n            // Fetch data or perform other loading logic here\n         }\n         \n         // ... component render logic\n      }\n\n\n     \n\nlet EmojiSrc = `http://openweathermap.org/img/wn/${props.emoji}@2x.png`;\n\n\n\n        \n    return (\n      <div className=\"Weather\">\n        <h1>{props.city}</h1>\n\n        <div className=\"info\">{day} {fullday} ,{date}</div>\n        <div className=\"info\">{props.desc}</div>\n\n      <CurrentTemp submit = {props.submit} city = {props.city} desc= {props.desc}  temp = {props.temp} emoji = {EmojiSrc} hum = {props.hum} wind = {props.wind}/>\n      <Forecast forecast = {props.forecast}/>\n      </div>\n    );\n   \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}