{"ast":null,"code":"var _jsxFileName = \"/Users/jimen/Dropbox/Mac/Documents/react-weather/src/Weather.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport CurrentTemp from \"./CurrentTemp\";\nimport Forecast from \"./Forecast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Weather(props) {\n  _s2();\n  var _s = $RefreshSig$();\n  let [date, setDate] = useState(null);\n  let [day, setDay] = useState(null);\n  let days = [\"Mon\", \"Tue\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\", \"Sun\"];\n  function loadDate() {\n    let now = new Date();\n    let day = days[now.getDay()];\n    let hours = now.getHours();\n    let min = now.getMinutes();\n    if (min < 10) {\n      min = `0${min}`;\n    }\n    let time = `${hours}:${min}`;\n    setDate(time);\n    setDay(day);\n  }\n  MyComponent();\n  function MyComponent() {\n    _s();\n    useEffect(() => {\n      loadData();\n    }, []); // Pass an empty array to only call the function once on mount.\n\n    function loadData() {\n      loadDate();\n      console.log(date);\n      // Fetch data or perform other loading logic here\n    }\n\n    // ... component render logic\n  }\n  _s(MyComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  let EmojiSrc = `http://openweathermap.org/img/wn/${props.emoji}@2x.png`;\n  if (props.submit === true || props.submit === \"start\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [day, \" ,\", date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: props.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CurrentTemp, {\n        submit: props.submit,\n        city: props.city,\n        desc: props.desc,\n        temp: props.temp,\n        emoji: EmojiSrc,\n        hum: props.hum,\n        wind: props.wind\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n        forecast: props.forecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s2(Weather, \"YRDUEV+Xs1inncKuwbz4UHuwpE8=\");\n_c = Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","CurrentTemp","Forecast","jsxDEV","_jsxDEV","Weather","props","_s2","_s","$RefreshSig$","date","setDate","day","setDay","days","loadDate","now","Date","getDay","hours","getHours","min","getMinutes","time","MyComponent","loadData","console","log","EmojiSrc","emoji","submit","className","children","city","fileName","_jsxFileName","lineNumber","columnNumber","desc","temp","hum","wind","forecast","_c","$RefreshReg$"],"sources":["/Users/jimen/Dropbox/Mac/Documents/react-weather/src/Weather.js"],"sourcesContent":["import React, {useState}  from \"react\";\nimport {useEffect} from \"react\";\n\n\nimport CurrentTemp from \"./CurrentTemp\";\nimport Forecast from \"./Forecast\";\n\nexport default function Weather(props) {\n\n\n    let [date , setDate] = useState(null);\n    let [day , setDay] = useState(null);\n\n\n   \n    \n\n    let days = [\n        \"Mon\",\n        \"Tue\",\n        \"Wed\",\n        \"Thurs\",\n        \"Fri\",\n        \"Sat\",\n        \"Sun\",\n      ];\n    \n\n    function loadDate() {\n        let now = new Date();\n        let day = days[now.getDay()];\n        let hours = now.getHours();\n        let min = now.getMinutes();\n        if (min < 10) {\n          min = `0${min}`;\n        }\n        let time = `${hours}:${min}`;\n      \n        setDate  (time);\n        setDay(day);\n\n      }\n\n\n      MyComponent();\n\n      function MyComponent() {\n         useEffect(() => {\n            loadData();\n         }, []); // Pass an empty array to only call the function once on mount.\n         \n         function loadData() {\n      \n          loadDate();\n          console.log(date);\n            // Fetch data or perform other loading logic here\n         }\n         \n         // ... component render logic\n      }\n\n\n     \n\nlet EmojiSrc = `http://openweathermap.org/img/wn/${props.emoji}@2x.png`;\n\n\n    if (props.submit === true || props.submit === \"start\"){return (\n      <div className=\"Weather\">\n        <h1>{props.city}</h1>\n\n        <div className=\"info\">{day} ,{date}</div>\n        <div className=\"info\">{props.desc}</div>\n\n      <CurrentTemp submit = {props.submit} city = {props.city} desc= {props.desc}  temp = {props.temp} emoji = {EmojiSrc} hum = {props.hum} wind = {props.wind}/>\n      <Forecast forecast = {props.forecast}/>\n      </div>\n    );\n    }\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAQ,OAAO;AACtC,SAAQC,SAAS,QAAO,OAAO;AAG/B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,eAAe,SAASC,OAAOA,CAACC,KAAK,EAAE;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAGnC,IAAI,CAACC,IAAI,EAAGC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACrC,IAAI,CAACa,GAAG,EAAGC,MAAM,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAMnC,IAAIe,IAAI,GAAG,CACP,KAAK,EACL,KAAK,EACL,KAAK,EACL,OAAO,EACP,KAAK,EACL,KAAK,EACL,KAAK,CACN;EAGH,SAASC,QAAQA,CAAA,EAAG;IAChB,IAAIC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACpB,IAAIL,GAAG,GAAGE,IAAI,CAACE,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC;IAC5B,IAAIC,KAAK,GAAGH,GAAG,CAACI,QAAQ,CAAC,CAAC;IAC1B,IAAIC,GAAG,GAAGL,GAAG,CAACM,UAAU,CAAC,CAAC;IAC1B,IAAID,GAAG,GAAG,EAAE,EAAE;MACZA,GAAG,GAAI,IAAGA,GAAI,EAAC;IACjB;IACA,IAAIE,IAAI,GAAI,GAAEJ,KAAM,IAAGE,GAAI,EAAC;IAE5BV,OAAO,CAAGY,IAAI,CAAC;IACfV,MAAM,CAACD,GAAG,CAAC;EAEb;EAGAY,WAAW,CAAC,CAAC;EAEb,SAASA,WAAWA,CAAA,EAAG;IAAAhB,EAAA;IACpBR,SAAS,CAAC,MAAM;MACbyB,QAAQ,CAAC,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAER,SAASA,QAAQA,CAAA,EAAG;MAEnBV,QAAQ,CAAC,CAAC;MACVW,OAAO,CAACC,GAAG,CAACjB,IAAI,CAAC;MACf;IACH;;IAEA;EACH;EAACF,EAAA,CAbQgB,WAAW;EAkB1B,IAAII,QAAQ,GAAI,oCAAmCtB,KAAK,CAACuB,KAAM,SAAQ;EAGnE,IAAIvB,KAAK,CAACwB,MAAM,KAAK,IAAI,IAAIxB,KAAK,CAACwB,MAAM,KAAK,OAAO,EAAC;IAAC,oBACrD1B,OAAA;MAAK2B,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtB5B,OAAA;QAAA4B,QAAA,EAAK1B,KAAK,CAAC2B;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAErBjC,OAAA;QAAK2B,SAAS,EAAC,MAAM;QAAAC,QAAA,GAAEpB,GAAG,EAAC,IAAE,EAACF,IAAI;MAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACzCjC,OAAA;QAAK2B,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAE1B,KAAK,CAACgC;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAE1CjC,OAAA,CAACH,WAAW;QAAC6B,MAAM,EAAIxB,KAAK,CAACwB,MAAO;QAACG,IAAI,EAAI3B,KAAK,CAAC2B,IAAK;QAACK,IAAI,EAAGhC,KAAK,CAACgC,IAAK;QAAEC,IAAI,EAAIjC,KAAK,CAACiC,IAAK;QAACV,KAAK,EAAID,QAAS;QAACY,GAAG,EAAIlC,KAAK,CAACkC,GAAI;QAACC,IAAI,EAAInC,KAAK,CAACmC;MAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAC3JjC,OAAA,CAACF,QAAQ;QAACwC,QAAQ,EAAIpC,KAAK,CAACoC;MAAS;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAER;AACJ;AAAC9B,GAAA,CAxEuBF,OAAO;AAAAsC,EAAA,GAAPtC,OAAO;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}